{"ast":null,"code":"import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../_services/token-storage.service\";\nimport * as i2 from \"@angular/router\";\nconst TOKEN_HEADER_KEY = 'Authorization';\nexport let AuthInterceptor = /*#__PURE__*/(() => {\n  class AuthInterceptor {\n    constructor(token, router) {\n      this.token = token;\n      this.router = router;\n    }\n    intercept(req, next) {\n      let authReq = req;\n      const loginPath = '/login';\n      const token = this.token.getToken();\n      if (token != null) {\n        authReq = req.clone({\n          headers: req.headers.set(TOKEN_HEADER_KEY, 'Bearer ' + token)\n        });\n      }\n      return next.handle(authReq).pipe(tap(() => {}, err => {\n        if (err instanceof HttpErrorResponse) {\n          if (err.status !== 401 || window.location.pathname === loginPath) {\n            return;\n          }\n          this.token.signOut();\n          window.location.href = loginPath;\n        }\n      }));\n    }\n    static #_ = this.ɵfac = function AuthInterceptor_Factory(t) {\n      return new (t || AuthInterceptor)(i0.ɵɵinject(i1.TokenStorageService), i0.ɵɵinject(i2.Router));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthInterceptor,\n      factory: AuthInterceptor.ɵfac\n    });\n  }\n  return AuthInterceptor;\n})();\nexport const authInterceptorProviders = [{\n  provide: HTTP_INTERCEPTORS,\n  useClass: AuthInterceptor,\n  multi: true\n}];","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}